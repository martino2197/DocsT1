openapi: 3.1.0
info:
  title: API SSO documentación
  description: "# \U0001F4C4 Get started here\n\nThis template contains a boilerplate for documentation that you can quickly customize and reuse.\n\n## \U0001F516 How to use this template\n\n- Replace the content given brackets (()) with your API's details.\n- Tips are formatted in `codespan` - feel free to read and remove them.\n    \n\n---\n\n`Start with a brief overview of what your API offers.`\n\nThe ((product name)) provides many API products, tools, and resources that enable you to ((add product value here)).\n\n`You can also list the APIs you offer, link to the relevant pages, or do both in this section.`\n\n## **Getting started guide**\n\n`List the steps or points required to start using your APIs. Make sure to cover everything required to reach success with your API as quickly as possible.`\n\nTo start using the ((add APIs here)), you need to -\n\n`The points given below are from The Postman API's documentation. You can reference it to write your own getting started guide.`\n\n- You must use a valid API Key to send requests to the API endpoints. You can get your API key from Postman's [integrations dashboard](https://go.postman.co/settings/me/api-keys).\n- The API has [rate and usage limits](https://learning.postman.com/docs/developer/postman-api/postman-api-rate-limits/).\n- The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.\n- The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key.\n    \n\n## Authentication\n\n`Add details on the authorization keys/tokens required, steps that cover how to get them, and the relevant error codes.`\n\nThe ((product name)) API uses ((add your API's authorization type)) for authentication.\n\n`The details given below are from the Postman API's documentation. You can reference it to write your own authentication section.`\n\nPostman uses API keys for authentication. You can generate a Postman API key in the [API keys](https://postman.postman.co/settings/me/api-keys) section of your Postman account settings.\n\nYou must include an API key in each request to the Postman API with the X-Api-Key request header.\n\n### Authentication error response\n\nIf an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.\n\n## Rate and usage limits\n\n`Use this section to cover your APIs' terms of use. Include API limits, constraints, and relevant error codes, so consumers understand the permitted API usage and practices.`\n\n`The example given below is from The Postman API's documentation. Use it as a reference to write your APIs' terms of use.`\n\nAPI access rate limits apply at a per-API key basis in unit time. The limit is 300 requests per minute. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code.\n\nEach API response returns the following set of headers to help you identify your use status:\n\n| Header | Description |\n| --- | --- |\n| `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make per minute. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |\n\n### 503 response\n\nAn HTTP `503` response from our servers indicates there is an unexpected spike in API access traffic. The server is usually operational within the next five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, [contact support](https://support.postman.com/hc/en-us/requests/new/).\n\n### **Need some help?**\n\n`Add links that customers can refer to whenever they need help.`\n\nIn case you have questions, go through our tutorials ((link to your video or help documentation here)). Or visit our FAQ page ((link to the relevant page)).\n\nOr you can check out our community forum, there’s a good chance our community has an answer for you. Visit our developer forum ((link to developer forum)) to review topics, ask questions, and learn from others.\n\n`You can also document or add links to libraries, code examples, and other resources needed to make a request.`"
  contact: {}
  version: '1.0'
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
servers:
- url: https://loginclaro.com/auth/realms/plataforma-claro/protocol/openid-connect
  variables: {}
- url: https://enapi.t1envios.com/t1/pgs
  variables: {}
paths:
  /token:
    post:
      tags:
      - Auth
      summary: Autenticación
      description: Antes de realizar cualquier operación, es necesario obtener un token de acceso proporcionando tus credenciales (`username` y `password`), que son tu correo electrónico y contraseña con los que ingresas a [t1envios.com](https://t1envios.com). Los valores de `client_id`, `grant_type` y `client_secret` son preestablecidos y deben usarse tal cual vienen en esta documentación.
      operationId: Obteneruntoken
      # parameters:
      # - name: Content-Type
        # in: header
        # description: 'application/x-www-form-urlencoded'
        # required: true
        # schema:
        #   type: string
        #   enum: ['application/x-www-form-urlencoded']
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  description: password
                  type: string
                  examples: password
                client_id:
                  description: t1envios
                  type: string
                  examples: t1envios
                username:
                  description: Correo con que se registro en la pagina
                  type: string
                  examples: correopruebamonadic@gmail.com
                password:
                  description: Contraseña que registro en la pagina
                  type: string
                  examples: Monadic#2020
                client_secret:
                  description: d1d661be-8487-4660-bc19-540dbb12fb05
                  type: string
                  examples: d1d661be-8487-4660-bc19-540dbb12fb05
              required:
              - grant_type
              - client_id
              - username
              - password
              - client_secret
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/SuccessfulResponse'
                - description: Respuesta de petición de cotización JSON.
                  examples:
                  - access_token: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6IC..
                    expires_in: 1800
                    refresh_expires_in: 7776000
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3..
                    token_type: bearer
                    not-before-policy: 1627348134
                    session_state: 92167821-edd8-4b3b-9338-277afe04e8a2
                    scope: email profile
                contentMediaType: application/json
              examples:
                Respuesta de petición de cotización JSON.:
                  value:
                    access_token: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6IC..
                    expires_in: 1800
                    refresh_expires_in: 7776000
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3..
                    token_type: bearer
                    not-before-policy: 1627348134
                    session_state: 92167821-edd8-4b3b-9338-277afe04e8a2
                    scope: email profile
                user:
                  id: 12345678
                  username: taylor-lee
                  email: taylor.lee@example.com
                  fullName: Taylor Lee
                  avatar: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
                  isPublic: true
                operations:
                - name: mock_usage
                  limit: 1000000
                  usage: 110276
                  overage: 0
                - name: monitor_request_runs
                  limit: 10000000
                  usage: 1141750
                  overage: 0
                - name: api_usage
                  limit: 1000000
                  usage: 16240
                  overage: 0
                - name: custom_domains
                  limit: 25
                  usage: 25
                  overage: 0
                - name: serverless_requests
                  limit: 10000
                  usage: 0
                  overage: 0
                - name: integrations
                  limit: 5000
                  usage: 1018
                  overage: 0
                - name: cloud_agent_requests
                  limit: 1000000
                  usage: 1615
                  overage: 0
        '429':
          description: Too Many Requests
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/RateLimitExceeded1'
                - examples:
                  - error: rateLimited
                    message: Rate limit exceeded. Please retry after 1669048687
                contentMediaType: application/json
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
      deprecated: false
      servers:
      - url: https://loginclaro.com/auth/realms/plataforma-claro/protocol/openid-connect
        variables: {}
    parameters: []
  /mensajeria-cotizador:
    post:
      tags:
      - Collections
      summary: Cotizador
      description: Este endpoint permite a los usuarios generar cotizaciones de envío con diferentes paqueterías basadas en el código postal de origen y destino, así como en las dimensiones y peso del paquete. Es útil para obtener un costo estimado del envío antes de proceder con la creación de la guía. Al proporcionar la información requerida, el sistema devolverá las cotizaciones disponibles de diversas paqueterías.
      operationId: Cotizador
      parameters:
      - name: Authorization
        in: header
        description: Bearer "access_token"
        required: true
        # style: simple
        # schema:
          # type: string
          # examples:
          # - Baerer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3M2ZiUk1KbmVSQmU4el9zRXNQZTcyRjdBZFVrNnlDZ0VnN2VwWDM3RWJvIn0.eyJleHAiOjE3MjE3OTkyMTAsImlhdCI6MTcyMTc5NTYxMCwianRpIjoiMmIwNGQ0N2UtYzIwMS00MjFlLWExZjEtMTM4ZTg3ZWQxMzUyIiwiaXNzIjoiaHR0cHM6Ly9sb2dpbmNsYXJvLmNvbS9hdXRoL3JlYWxtcy9wbGF0YWZvcm1hLWNsYXJvIiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjQ0YzY1NDI5LWI0MGItNDhlMC05MDcyLTM5MzFlYzhkOWZmYSIsInR5cCI6IkJlYXJlciIsImF6cCI6InQxZW52aW9zIiwic2Vzc2lvbl9zdGF0ZSI6IjBiZTJjZTIzLTFlMDctNDE1MC1hNGE2LWViMjA4YTYwMzlmMiIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImJpcnRoRGF5IjoiMTAtMTAtMTk5MCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZ2VuZGVyIjoiTWFzY3VsaW5vIiwibmFtZSI6IkFydHVybyBNb25hZGljIiwibW9iaWxlIjoiMjM4MTczMzU3MSIsInByZWZlcnJlZF91c2VybmFtZSI6ImNvcnJlb3BydWViYW1vbmFkaWNAZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6IkFydHVybyIsImZhbWlseV9uYW1lIjoiTW9uYWRpYyIsImVtYWlsIjoiY29ycmVvcHJ1ZWJhbW9uYWRpY0BnbWFpbC5jb20ifQ.VN6a-T8HK-oanThRiy7WoIXeUR88pFUWMU3FBZQ3MKrZflnF5hRHkujtfUjD9TxxyKQBvojyk_EebY63-sH5w2Z3iKkaQOPR_i4LriyEy4BKeArV7SERvB8jCWAJLyaIadxkbe4UYtP_9RPz4ROzNdWbVBrPOIhI31EvXKcpMgvW5MmJB1FwEnLiiqkH_Y_1aEHMFXlRHeAlJHS-kMDgY7CHa-URF7NDxsPz7aQp5yyPm4P9rRYG1MQAnRhOML1gVYHO8GCJ1gT3R7v3McFV6-V7YlQUdoh3TUBGw9C8DqNlVbpMXYgGvugvr_fHUFXFMiJibF7WDt3CqzneYWDoxg
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CotizadorRequest'
              - examples:
                - codigo_postal_origen: '11510'
                  codigo_postal_destino: '11510'
                  peso: 1
                  largo: 20
                  ancho: 10
                  alto: 10
                  dias_embarque: 1
                  seguro: 0
                  valor_paquete: 33
                  tipo_paquete: 2
                  comercio_id: '60662'
                  productos:
                  - descripcion_sat: Servicios postales de paqueteo y courrier
                    codigo_sat: '78102200'
                    peso: 1
                    largo: 10
                    ancho: 10
                    alto: 10
                    precio: 1
              contentMediaType: application/json
            example:
              codigo_postal_origen: '11510'
              codigo_postal_destino: '11510'
              peso: 1
              largo: 20
              ancho: 10
              alto: 10
              dias_embarque: 1
              seguro: 0
              valor_paquete: 33
              tipo_paquete: 2
              comercio_id: '60662'
              productos:
              - descripcion_sat: Servicios postales de paqueteo y courrier
                codigo_sat: '78102200'
                peso: 1
                largo: 10
                ancho: 10
                alto: 10
                precio: 1
        required: true
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/SuccessfulResponse1'
                - examples:
                  - collection:
                      id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                      name: Test Collection
                      uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                contentMediaType: application/json
              example:
                collection:
                  id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                  name: Test Collection
                  uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/BadRequest1'
                - examples:
                  - error:
                      name: instanceFoundError
                      message: The specified item already exists.
                      details:
                        item: collection
                        id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                contentMediaType: application/json
              example:
                error:
                  name: instanceFoundError
                  message: The specified item already exists.
                  details:
                    item: collection
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
            application/json; charset=utf-8:
              schema:
                allOf:
                - $ref: '#/components/schemas/MalformedRequest1'
                - examples:
                  - error:
                      name: malformedRequestError
                      message: Found 1 errors with the supplied collection.
                      details:
                      - ": must have required property 'info'"
                contentMediaType: application/json; charset=utf-8
              example:
                error:
                  name: malformedRequestError
                  message: Found 1 errors with the supplied collection.
                  details:
                  - ": must have required property 'info'"
        '429':
          description: Too Many Requests
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/RateLimitExceeded1'
                - examples:
                  - error: rateLimited
                    message: Rate limit exceeded. Please retry after 1669048687
                contentMediaType: application/json
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
      deprecated: false
      security: []
      servers:
      - url: https://enapi.t1envios.com/t1/pgs
        variables: {}
    parameters: []
  /generar-guia-mensajeria/vmCzqzVmd5Ztd46eVrGaIvffdNmtSFVK0sEqDPfmCtLOrWIDMBIUNVAqqmTZ:
    post:
      tags:
      - Collections
      summary: Genera guia
      description: Deletes a collection.
      operationId: Generaguia
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/GeneraguiaRequest'
              - examples:
                - contenido: prueba
                  codigo_producto: '02314'
                  nombre_origen: Mónica
                  apellidos_origen: Sanchez Lara
                  email_origen: prueba.sl@gmail.com
                  calle_origen: '1678'
                  numero_origen: ' mz563 lt13'
                  colonia_origen: santo tomas
                  telefono_origen: '5555555555'
                  estado_origen: Ciudad de Mexico
                  municipio_origen: Coacalco
                  referencias_origen: Referencia remitente
                  nombre_destino: Cárlos Guillermo
                  apellidos_destino: Ródriguez Velasco
                  email_destino: velasco@prueba.com
                  calle_destino: calle 22
                  numero_destino: Yuyan norte 508
                  colonia_destino: Loma Real
                  telefono_destino: '5222222222'
                  estado_destino: Mexico
                  municipio_destino: Tiltitlan
                  referencias_destino: Referencia destino
                  origen_guia: t1envios
                  tiene_notificacion: false
                  comercio_id: '60662'
                  generar_recoleccion: false
                  codificacion: base64
              contentMediaType: application/json
            example:
              contenido: prueba
              codigo_producto: '02314'
              nombre_origen: Mónica
              apellidos_origen: Sanchez Lara
              email_origen: prueba.sl@gmail.com
              calle_origen: '1678'
              numero_origen: ' mz563 lt13'
              colonia_origen: santo tomas
              telefono_origen: '5555555555'
              estado_origen: Ciudad de Mexico
              municipio_origen: Coacalco
              referencias_origen: Referencia remitente
              nombre_destino: Cárlos Guillermo
              apellidos_destino: Ródriguez Velasco
              email_destino: velasco@prueba.com
              calle_destino: calle 22
              numero_destino: Yuyan norte 508
              colonia_destino: Loma Real
              telefono_destino: '5222222222'
              estado_destino: Mexico
              municipio_destino: Tiltitlan
              referencias_destino: Referencia destino
              origen_guia: t1envios
              tiene_notificacion: false
              comercio_id: '60662'
              generar_recoleccion: false
              codificacion: base64
        required: true
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/SuccessfulResponse2'
                - examples:
                  - collection:
                      id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                      uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                contentMediaType: application/json
              example:
                collection:
                  id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                  uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
        '404':
          description: Not Found
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/NotFound1'
                - examples:
                  - error:
                      name: instanceNotFoundError
                      message: The specified item does not exist.
                      details:
                        item: collection
                        id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                contentMediaType: application/json
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        '429':
          description: Too Many Requests
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/RateLimitExceeded1'
                - examples:
                  - error: rateLimited
                    message: Rate limit exceeded. Please retry after 1669048687
                contentMediaType: application/json
              example:
                error: rateLimited
                message: Rate limit exceeded. Please retry after 1669048687
      deprecated: false
      servers:
      - url: https://enapi.t1envios.com/t1/pgs
        variables: {}
    parameters: []
components:
  schemas:
    SuccessfulResponse:
      title: SuccessfulResponse
      type: object
      properties:
        access_token:
          type: string
          description: Contiene el JWT Token de acceso
        expires_in:
          type: integer
          description: Tiempo de vida en segundos del access_token.
          contentEncoding: int32
        refresh_expires_in:
          type: integer
          description: Tiempo de vida en segundos del token de actualización
          contentEncoding: int32
        refresh_token:
          type: string
          description: El token de actualización, que se puede usar para obtener nuevos tokens de acceso utilizando la misma concesión de autorización
        token_type:
          type: string
          description: Tipo de token “bearer”
        not-before-policy:
          type: integer
          description: Políticas de revocación no antes por dominio, aplicación y usuario
          contentEncoding: int32
        session_state:
          type: string
          description: String que representa el estado de inicio de sesión del usuario
        scope:
          type: string
          description: scopes otorgados
      description: Respuesta de petición de cotización JSON.
      examples:
      - access_token: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6IC..
        expires_in: 1800
        refresh_expires_in: 7776000
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3..
        token_type: bearer
        not-before-policy: 1627348134
        session_state: 92167821-edd8-4b3b-9338-277afe04e8a2
        scope: email profile
    User:
      title: User
      required:
      - id
      - username
      - email
      - fullName
      - avatar
      - isPublic
      type: object
      properties:
        id:
          type: integer
          contentEncoding: int32
        username:
          type: string
        email:
          type: string
        fullName:
          type: string
        avatar:
          type: string
        isPublic:
          type: boolean
      examples:
      - id: 12345678
        username: taylor-lee
        email: taylor.lee@example.com
        fullName: Taylor Lee
        avatar: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
        isPublic: true
    Operation:
      title: Operation
      required:
      - name
      - limit
      - usage
      - overage
      type: object
      properties:
        name:
          type: string
        limit:
          type: integer
          contentEncoding: int32
        usage:
          type: integer
          contentEncoding: int32
        overage:
          type: integer
          contentEncoding: int32
      examples:
      - name: mock_usage
        limit: 1000000
        usage: 110276
        overage: 0
    RateLimitExceeded1:
      title: RateLimitExceeded1
      required:
      - error
      - message
      type: object
      properties:
        error:
          type: string
        message:
          type: string
      examples:
      - error: rateLimited
        message: Rate limit exceeded. Please retry after 1669048687
    CotizadorRequest:
      title: CotizadorRequest
      required:
      - codigo_postal_origen
      - codigo_postal_destino
      - peso
      - largo
      - ancho
      - alto
      - dias_embarque
      - seguro
      - valor_paquete
      - tipo_paquete
      - comercio_id
      - productos
      type: object
      properties:
        codigo_postal_origen:
          type: string
        codigo_postal_destino:
          type: string
        peso:
          type: integer
          contentEncoding: int32
        largo:
          type: integer
          contentEncoding: int32
        ancho:
          type: integer
          contentEncoding: int32
        alto:
          type: integer
          contentEncoding: int32
        dias_embarque:
          type: integer
          contentEncoding: int32
        seguro:
          type: integer
          contentEncoding: int32
        valor_paquete:
          type: integer
          contentEncoding: int32
        tipo_paquete:
          type: integer
          contentEncoding: int32
        comercio_id:
          type: string
        productos:
          type: array
          items:
            $ref: '#/components/schemas/Producto'
          description: ''
      examples:
      - codigo_postal_origen: '11510'
        codigo_postal_destino: '11510'
        peso: 1
        largo: 20
        ancho: 10
        alto: 10
        dias_embarque: 1
        seguro: 0
        valor_paquete: 33
        tipo_paquete: 2
        comercio_id: '60662'
        productos:
        - descripcion_sat: Servicios postales de paqueteo y courrier
          codigo_sat: '78102200'
          peso: 1
          largo: 10
          ancho: 10
          alto: 10
          precio: 1
    Producto:
      title: Producto
      required:
      - descripcion_sat
      - codigo_sat
      - peso
      - largo
      - ancho
      - alto
      - precio
      type: object
      properties:
        descripcion_sat:
          type: string
        codigo_sat:
          type: string
        peso:
          type: integer
          contentEncoding: int32
        largo:
          type: integer
          contentEncoding: int32
        ancho:
          type: integer
          contentEncoding: int32
        alto:
          type: integer
          contentEncoding: int32
        precio:
          type: integer
          contentEncoding: int32
      examples:
      - descripcion_sat: Servicios postales de paqueteo y courrier
        codigo_sat: '78102200'
        peso: 1
        largo: 10
        ancho: 10
        alto: 10
        precio: 1
    SuccessfulResponse1:
      title: SuccessfulResponse1
      required:
      - collection
      type: object
      properties:
        collection:
          allOf:
          - $ref: '#/components/schemas/Collection'
          - {}
      examples:
      - collection:
          id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
          name: Test Collection
          uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
    Collection:
      title: Collection
      required:
      - id
      - name
      - uid
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uid:
          type: string
      examples:
      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        name: Test Collection
        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
    Error:
      title: Error
      required:
      - name
      - message
      - details
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        details:
          allOf:
          - $ref: '#/components/schemas/Details'
          - {}
      examples:
      - name: instanceFoundError
        message: The specified item already exists.
        details:
          item: collection
          id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
    Details:
      title: Details
      required:
      - item
      - id
      type: object
      properties:
        item:
          type: string
        id:
          type: string
      examples:
      - item: collection
        id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
    BadRequest1:
      title: BadRequest1
      required:
      - error
      type: object
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/Error'
          - {}
      examples:
      - error:
          name: instanceFoundError
          message: The specified item already exists.
          details:
            item: collection
            id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
    Error2:
      title: Error2
      required:
      - name
      - message
      - details
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
          description: ''
      examples:
      - name: malformedRequestError
        message: Found 1 errors with the supplied collection.
        details:
        - ": must have required property 'info'"
    MalformedRequest1:
      title: MalformedRequest1
      required:
      - error
      type: object
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/Error2'
          - {}
      examples:
      - error:
          name: malformedRequestError
          message: Found 1 errors with the supplied collection.
          details:
          - ": must have required property 'info'"
    GeneraguiaRequest:
      title: GeneraguiaRequest
      required:
      - contenido
      - codigo_producto
      - nombre_origen
      - apellidos_origen
      - email_origen
      - calle_origen
      - numero_origen
      - colonia_origen
      - telefono_origen
      - estado_origen
      - municipio_origen
      - referencias_origen
      - nombre_destino
      - apellidos_destino
      - email_destino
      - calle_destino
      - numero_destino
      - colonia_destino
      - telefono_destino
      - estado_destino
      - municipio_destino
      - referencias_destino
      - origen_guia
      - tiene_notificacion
      - comercio_id
      - generar_recoleccion
      - codificacion
      type: object
      properties:
        contenido:
          type: string
        codigo_producto:
          type: string
        nombre_origen:
          type: string
        apellidos_origen:
          type: string
        email_origen:
          type: string
        calle_origen:
          type: string
        numero_origen:
          type: string
        colonia_origen:
          type: string
        telefono_origen:
          type: string
        estado_origen:
          type: string
        municipio_origen:
          type: string
        referencias_origen:
          type: string
        nombre_destino:
          type: string
        apellidos_destino:
          type: string
        email_destino:
          type: string
        calle_destino:
          type: string
        numero_destino:
          type: string
        colonia_destino:
          type: string
        telefono_destino:
          type: string
        estado_destino:
          type: string
        municipio_destino:
          type: string
        referencias_destino:
          type: string
        origen_guia:
          type: string
        tiene_notificacion:
          type: boolean
        comercio_id:
          type: string
        generar_recoleccion:
          type: boolean
        codificacion:
          type: string
      examples:
      - contenido: prueba
        codigo_producto: '02314'
        nombre_origen: Mónica
        apellidos_origen: Sanchez Lara
        email_origen: prueba.sl@gmail.com
        calle_origen: '1678'
        numero_origen: ' mz563 lt13'
        colonia_origen: santo tomas
        telefono_origen: '5555555555'
        estado_origen: Ciudad de Mexico
        municipio_origen: Coacalco
        referencias_origen: Referencia remitente
        nombre_destino: Cárlos Guillermo
        apellidos_destino: Ródriguez Velasco
        email_destino: velasco@prueba.com
        calle_destino: calle 22
        numero_destino: Yuyan norte 508
        colonia_destino: Loma Real
        telefono_destino: '5222222222'
        estado_destino: Mexico
        municipio_destino: Tiltitlan
        referencias_destino: Referencia destino
        origen_guia: t1envios
        tiene_notificacion: false
        comercio_id: '60662'
        generar_recoleccion: false
        codificacion: base64
    SuccessfulResponse2:
      title: SuccessfulResponse2
      required:
      - collection
      type: object
      properties:
        collection:
          allOf:
          - $ref: '#/components/schemas/Collection1'
          - {}
      examples:
      - collection:
          id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
          uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
    Collection1:
      title: Collection1
      required:
      - id
      - uid
      type: object
      properties:
        id:
          type: string
        uid:
          type: string
      examples:
      - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
    NotFound1:
      title: NotFound1
      required:
      - error
      type: object
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/Error'
          - {}
      examples:
      - error:
          name: instanceNotFoundError
          message: The specified item does not exist.
          details:
            item: collection
            id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security:
- bearer: []
tags:
- name: Auth
  description: The `/me` endpoints let you manage information about the authenticated user.
- name: Collections
  description: The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/).